; assembly_hw.txt in repo
; Spicy
; Joel Bianchi
; 3/9/2023

section	.text
	global _start       ;must be declared for using gcc
_start:                     ;tell linker entry point
	
; 	; move num1&num2 data from memory into cpu
; 	mov eax, [num1]
; 	mov ebx, [num2]

;     ; add the data
;     add eax, ebx    ;data added and stored in first var, eax
;     add eax, '0'    ; adds ASCII char value of 0 to get correct ASCII value of char 7
;     mov [result], eax   ; stores in result var
    
    ; print name prompt
    mov	edx, pLen    ;message length
	mov	ecx, prompt    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
    ; take in a name string
    mov	edx, nLen     ;name should be less than 10 chars?
	mov	ecx, name    ;var to store name in
	mov	ebx, 0	    ;file descriptor (stdin)
	mov	eax, 3	    ;system call number (sys_read)
	int	0x80        ;call kernel
	
	; combine response with name into new var
	mov  r4, #STRING1_SIZE
loop1:
   ldrb r3, [r0], #1   ; Copy STRING1 to STRING3
      strb r3, [r2], #1
      subs r4, #1
      bne  loop1

mov  r4, #STRING2_SIZE
loop2:
   ldrb r3, [r1], #1   ; Copy STRING2 to STRING3
   strb r3, [r2], #1
   subs r4, #1
   bne  loop2

; Done

	; print initial response
	mov	edx, rLen    ;message length
	mov	ecx, response    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
	; print a name var
	mov	edx, nLen     ;max name length
	mov	ecx, name   ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	
; 	; printing the sum
;     mov	edx, 1    ;result's length
; 	mov	ecx, result    ;message to write
; 	mov	ebx, 1	    ;file descriptor (stdout)
; 	mov	eax, 4	    ;system call number (sys_write)
; 	int	0x80        ;call kernel
	
	
	; end the program
	mov	eax, 1	    ;system call number (sys_exit)
	int	0x80        ;call kernel

section	.data

prompt db 'What is your name?', 0xa   ;initial message
pLen equ $ - prompt
response db	'Hello, ',0xa	;our dear string
rLen equ	$ - response			;length of our dear string
nLen db 10
; num1 db 3
; num2 db 4

section .bss ;section for vars that are not constants

; result resb 1 ;resb = reserved bytes in memory, but no value
name resw 10 ;name will be assigned 10 bytes in memory


